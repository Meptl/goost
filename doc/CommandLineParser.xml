<?xml version="1.0" encoding="UTF-8" ?>
<class name="CommandLineParser" inherits="RefCounted" version="3.5">
	<brief_description>
		Enables parsing of command-line arguments.
	</brief_description>
	<description>
		[CommandLineParser] allows to define a set of [CommandLineOption]s, parse the command-line arguments, store parsed options and respective values. The class is mainly useful for parsing arguments from [method OS.get_cmdline_args], but can be used for other purposes as well.
		Options on the command line are recognized as starting with any of the specified [member long_prefixes] or [member short_prefixes] values. Long options consist of more than one character. Short options always consist of one character and can be written in a compound form, for instance [code]-abc[/code] is equivalent to [code]-a -b -c[/code].
		Option values can be specified either separated by a space or by an [code]=[/code] sign (if the option takes only 1 argument). Short options can also have sticky values (without a space in-between, e.g. [code]-Dvalue[/code]).
		Values can also be specified without an option name and the first option that is marked as [member CommandLineOption.positional] will be assigned automatically. For example, if the [code]input-file[/code] argument is marked as positional, then you can write either [code]--input-file=filename[/code] or just [code]filename[/code].
		The option [code]--[/code] (without any symbol after) is a special case and means that all following options will be captured as valid and can be obtained later using [method get_forwarding_args].
		Example:
		[codeblock]
		var parser = CommandLineParser.new()

		func _init():
		    var help = parser.add_help_option()
		    var version = parser.add_version_option()
		    var input = parser.add_option("input", "Specify filename to process.")

		    if parser.parse(["--input", "/path/to/file.txt"]) != OK:
		        print(parser.get_error_text())
		        return

		    if parser.is_set(help):
		        print(parser.get_help_text())
		        return

		    if parser.is_set(version):
		        print(GoostEngine.get_version_info().string)
		        return

		    print("Parsed value from '--input': ", parser.get_value(input))
		[/codeblock]
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_help_option">
			<return type="CommandLineOption" />
			<description>
				Adds the help option (-h, --help) with the default description. The option is automatically marked as [member CommandLineOption.meta].
			</description>
		</method>
		<method name="add_option">
			<return type="CommandLineOption" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="description" type="String" default="&quot;&quot;" />
			<argument index="2" name="default_value" type="String" default="&quot;&quot;" />
			<argument index="3" name="allowed_values" type="PackedStringArray" default="PackedStringArray(  )" />
			<description>
				Instantiates a new [CommandLineOption] with a single name and adds it to the parser. Description, default value, and a list of allowed values can be optionally specified. Note that this method provides common parameters only, you can create [CommandLineOption] and use [method append_option] manually if you need to configure other properties for a new option, or modify the properties of the option returned by this method instead before parsing command-line arguments with [method parse].
			</description>
		</method>
		<method name="add_version_option">
			<return type="CommandLineOption" />
			<description>
				Adds the version option (-v, --version) with the default description. The option is automatically marked as [member CommandLineOption.meta].
			</description>
		</method>
		<method name="append_option">
			<return type="void" />
			<argument index="0" name="option" type="CommandLineOption" />
			<description>
				Adds an existing option to look for while parsing. Prefer to use [method add_option] for defining new command-line options.
			</description>
		</method>
		<method name="clear">
			<return type="void" />
			<description>
				Clears all parsed data and specified options.
			</description>
		</method>
		<method name="find_option" qualifiers="const">
			<return type="CommandLineOption" />
			<argument index="0" name="name" type="String" />
			<description>
				Finds an option by name, returns [code]null[/code] if it doesn't exist.
			</description>
		</method>
		<method name="get_args" qualifiers="const">
			<return type="PackedStringArray" />
			<description>
				Returns all arguments that were passed by [method parse].
			</description>
		</method>
		<method name="get_error_text" qualifiers="const">
			<return type="String" />
			<description>
				Returns a human-readable description of the last parser error that occurred.
			</description>
		</method>
		<method name="get_forwarding_args" qualifiers="const">
			<return type="PackedStringArray" />
			<description>
				Returns all arguments that were forwarded after parsing (e.g. all arguments after [code]--[/code]).
			</description>
		</method>
		<method name="get_help_text" qualifiers="const">
			<return type="String" />
			<argument index="0" name="format" type="CommandLineHelpFormat" default="null" />
			<description>
				Returns a string containing the complete help information generated from the added options. If [code]format[/code] is not [code]null[/code], the returned text will be formatted with a custom format defined via [CommandLineHelpFormat] object, otherwise the default format is used.
			</description>
		</method>
		<method name="get_occurrence_count" qualifiers="const">
			<return type="int" />
			<argument index="0" name="option" type="CommandLineOption" />
			<description>
				Returns the number of times the option was parsed. Mostly useful for options which are defined as multitoken, see [member CommandLineOption.multitoken].
			</description>
		</method>
		<method name="get_option" qualifiers="const">
			<return type="CommandLineOption" />
			<argument index="0" name="index" type="int" />
			<description>
				Returns the option at index position [code]index[/code]. Negative indices can be used to count from the back, like in Python (-1 is the last element, -2 the second to last, etc.).
			</description>
		</method>
		<method name="get_option_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of options in the parser.
			</description>
		</method>
		<method name="get_prefix" qualifiers="const">
			<return type="String" />
			<argument index="0" name="option" type="CommandLineOption" />
			<description>
				Returns first used prefix for [code]option[/code]. Example: for parsed [code]--help[/code] will return [code]--[/code]. Convenient helper for [method get_prefix_list].
			</description>
		</method>
		<method name="get_prefix_list" qualifiers="const">
			<return type="PackedStringArray" />
			<argument index="0" name="option" type="CommandLineOption" />
			<description>
				Returns all used prefixes for [code]option[/code].
			</description>
		</method>
		<method name="get_value" qualifiers="const">
			<return type="String" />
			<argument index="0" name="option" type="CommandLineOption" />
			<description>
				Returns first specified value for [code]option[/code]. Example: for parsed [code]--input filename.png[/code] will return [code]filename.png[/code]. Convenient helper for [method get_value_list].
			</description>
		</method>
		<method name="get_value_list" qualifiers="const">
			<return type="PackedStringArray" />
			<argument index="0" name="option" type="CommandLineOption" />
			<description>
				Returns all specified values for [code]option[/code].
			</description>
		</method>
		<method name="is_set" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="option" type="CommandLineOption" />
			<description>
				Returns [code]true[/code] if [code]option[/code] was specified. If the option does not accept any arguments ([member CommandLineOption.arg_count] is equal to [code]0[/code]), this is the only way to check whether the option was specified on the command-line.
			</description>
		</method>
		<method name="parse">
			<return type="int" enum="Error" />
			<argument index="0" name="args" type="PackedStringArray" />
			<description>
				Parses command-line [code]args[/code]. Returns [constant OK] upon success, or [constant ERR_PARSE_ERROR] upon failure. In case of user error, refer to [method get_error_text] which returns human-readable error message which can be printed to a user.
				The method can accept command-line arguments returned by [method OS.get_cmdline_args].
				[b]Note[/b]: this method accepts a list of strings. Do not attempt to parse a single string containing command-line arguments with this method. You should split the string into components prior to parsing using [method String.split], if needed.
			</description>
		</method>
		<method name="remove_option">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<description>
				Removes option at specified [code]index[/code].
			</description>
		</method>
		<method name="set_option">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<argument index="1" name="option" type="CommandLineOption" />
			<description>
				Replaces option at specified [code]index[/code] with another [code]option[/code].
			</description>
		</method>
	</methods>
	<members>
		<member name="allow_adjacent" type="bool" setter="set_allow_adjacent" getter="is_adjacent_allowed" default="true">
			If [code]true[/code], values for options can delimited by [code]=[/code] sign. Example: [code]--input=filename.png[/code].
		</member>
		<member name="allow_compound" type="bool" setter="set_allow_compound" getter="is_compound_allowed" default="true">
			If [code]true[/code], short options can be specified without a space. Example: [code]-aux[/code] will be equivalent to [code]-a -u -x[/code].
		</member>
		<member name="allow_forwarding_args" type="bool" setter="set_allow_forwarding_args" getter="are_forwarding_args_allowed" default="false">
			If [code]true[/code], all arguments after [code]--[/code] will be treated as forwarding arguments and will be available using the [method get_forwarding_args]. Such arguments won't be parsed as options.
		</member>
		<member name="allow_sticky" type="bool" setter="set_allow_sticky" getter="is_sticky_allowed" default="true">
			If [code]true[/code], values for short options can be specified without a space. Example: [code]-ifilename.png[/code].
		</member>
		<member name="long_prefixes" type="PackedStringArray" setter="set_long_prefixes" getter="get_long_prefixes" default="PackedStringArray( &quot;--&quot; )">
			A list of prefixes after which an argument will be considered a long option. If two or more prefixes share the same set of characters (e.g. [code]--[/code] and [code]--no-[/code]), longest prefixes have higher precedence for parsing. For instance, [code]--no-debug[/code] won't be parsed as a separate [code]no-debug[/code] option, but as [code]debug[/code].
		</member>
		<member name="short_prefixes" type="PackedStringArray" setter="set_short_prefixes" getter="get_short_prefixes" default="PackedStringArray( &quot;-&quot; )">
			A list of prefixes after which an argument will be considered a short option.
		</member>
		<member name="similarity_bias" type="float" setter="set_similarity_bias" getter="get_similarity_bias" default="0.3">
			If a user entered a wrong option, the parser will suggest the most similar one in the error text returned by [method get_error_text]. If the most similar option found has a similarity value lower than the specified one, then it won't be suggested. Similarity is determined by [method String.similarity].
		</member>
	</members>
	<constants>
	</constants>
</class>
